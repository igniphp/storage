<?php declare(strict_types=1);
require_once __DIR__ . '/../vendor/autoload.php';

use Igni\Storage\Driver\ConnectionManager;
use Igni\Storage\Driver\Pdo\Connection;
use Igni\Storage\Driver\Pdo\Repository;
use Igni\Storage\Hydration\GenericHydrator;
use Igni\Storage\Hydration\ObjectHydrator;
use Igni\Storage\Id;
use Igni\Storage\Id\GenericId;
use Igni\Storage\Mapping\Annotation\Entity;
use Igni\Storage\Mapping\Annotation\Property;
use Igni\Storage\Storable;
use Igni\Storage\Storage;

/**
 * This is your custom hydrator - it implements decorator pattern.
 * $baseHydrator is a default hydrator generated by the framework,
 * it contains base hydration logic which can be extended in this class.
 */
final class TrackHydrator implements ObjectHydrator
{
    private $baseHydrator;

    public function __construct(GenericHydrator $baseHydrator)
    {
        $this->baseHydrator = $baseHydrator;
    }

    public function hydrate(array $data)
    {
        /** @var Track $entity */
        $entity = $this->baseHydrator->hydrate($data);
        $entity->setAlbum('Unknown album');
        // Here do custom hydration
        return $entity;
    }

    public function extract($entity): array
    {
        $data = $this->baseHydrator->extract($entity);
        // Here extract additional properties
        return $data;
    }
}

/**
 * This entity will be hydrated with our custom hydrator class.
 * Please take a careful look at the annotation below- it is using hydrator
 * property so framework knows which class should be used during the hydration.
 *
 * @Entity(source="tracks", hydrator=TrackHydrator::class)
 */
class Track implements Storable
{
    /**
     * @Property(type="id", name="TrackId", class=GenericId::class)
     */
    protected $id;

    /**
     * @Property(type="string", name="Name")
     */
    protected $name;

    /**
     * Please note: that this property is not hydrated by generic hydrator.
     * It gets hydrated by TrackHydrator.
     */
    protected $album;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function setAlbum(string $album)
    {
        $this->album = $album;
    }

    public function getAlbum()
    {
        return $this->album;
    }

    public function getId(): Id
    {
        return $this->id;
    }
}

// Below we setup bootstrap; connection and unit of work instance (Storage instance)

ConnectionManager::register(new Connection('sqlite:/' . __DIR__ . '/db.db'));

$unitOfWork = new Storage();

// Repository has to be registered so framework knows which class is responsible for obtaining given entity from database.
$unitOfWork->addRepository(new class($unitOfWork->getEntityManager()) extends Repository {
    public static function getEntityClass(): string
    {
        return Track::class;
    }
});

// Now database is queried and data gets hydrated with custom hydrator to instance of Track class.
$track = $unitOfWork->get(Track::class, 1);

echo $track->getAlbum();// Unknown album.
